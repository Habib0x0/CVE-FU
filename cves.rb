#!/usr/bin/ruby 
require 'terminal-table'
require 'optparse'
require 'openssl'
require 'uri'
require 'net/http'
require 'addressable/uri'
require 'json'
require 'colorize'


# Default values
DEFAULT_NUMBER = 5
DEFAULT_TIME_FRAME = 'day'
# Text Wrapper 
def wrap(text, width)
  text.gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n")
end

def prepare_http_request(url)
  uri = URI.parse(Addressable::URI.encode(url))
  http = Net::HTTP.new(uri.host, uri.port)
  if uri.scheme == 'https'
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end
  return http
end

def make_request(http, uri)
  request = Net::HTTP::Get.new(uri.request_uri)
  begin
    response = http.request(request)
  rescue StandardError => e
    puts "An error occurred: #{e}"
    exit 1 
  end

  if response.code != '200'
    puts "Error: API returned status code #{response.code}"
    exit 1
  end 

  return JSON.parse(response.body)
end

def filter_json_by_id(json, id)
  json.select { |cve| cve['id'] == id }
end 


def main()
  options = {}
  OptionParser.new do |parser|
    parser.banner = 'Usage: cves.rb [options]'
    parser.on("-n", "--number NUMBER", Integer, "Number of results to return") do |n|
      options[:number] = n || DEFAULT_NUMBER
    end

    parser.on("-i", "--id ID", "Search for a specific CVE by id") do |id|
      options[:id] = id
    end
    parser.on("-t", "--time_frame [time_frame]", [:day, :week], "Specify time frame for results") do |time_frame|
      options[:time_frame] = time_frame || DEFAULT_TIME_FRAME
    end
    parser.on("-h", "--help", "Prints this help") do
      puts parser
      exit
    end
  end.parse!
  
  config = JSON.parse(File.read('config.json'))
  time_frame = options[:time_frame] || DEFAULT_TIME_FRAME
  url = config.fetch("#{time_frame}_url")
  http = prepare_http_request(url)
  uri = URI.parse(Addressable::URI.encode(url))
  json = make_request(http, uri)
  json = filter_json_by_id(json, options[:id]) if options[:id]
  number_of_results = options[:number] || DEFAULT_NUMBER
  rows = []
if json 
    json.first(number_of_results).each do |cve|
      wrapped_text = wrap(cve['summary'], 80)
      wrapped_ref = cve['references'].map { |r| wrap(r, 80) }.join("\n")
      indented_text = wrapped_text.split("\n").map { |line| line.prepend(' ' * 4) }.join("\n")
      rows << [cve['id'].colorize(:blue), indented_text, cve['Published'].colorize(:blue), wrapped_ref]
    end
else
  puts " Error: Json variable is nil".red
  exit 1
end 

  table = Terminal::Table.new 
  table.title = 'Common Vulnerabilities and Exposures'.green
  table.headings = ['CVE'.colorize(:blue), 'Description', 'Published'.colorize(:blue), 'References']
  table.rows = rows 
  table.style = { border: :unicode_thick_edge, all_separators: true, border_x: '=', border_i: 'x'.red, alignment: :center }
  puts table
end

main()


  # Parse 

